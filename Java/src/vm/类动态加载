Java动态加载，不像C/C++的链接过程，将其他函数库等代码全部结合起来放到执行文件中

生命周期:		加载->验证->准备->解析->初始化->使用->卸载
	加载：	获取类的二进制流
	验证：	文件格式验证
			元数据验证
			字节码验证
			符号引用验证
	准备：	为类分配内存并设置类变量初始值的阶段
				所有静态非final变量被初始化为0
				所有静态final常量被初始化为ConstantValue属性所指定的值
	解析：	将常量池中的符号引用替换为直接引用
	初始化：	执行类构造器<clinit>()方法，包括static变量的复制和static域的执行
			一个类的<clinit>()方法在多线程环境下被正确地加锁和同步
			
类加载器ClassLoader		用指定的方法去获取类的二进制流		
	2个类相同，不仅仅它们的Class路径相同还必须它们的类加载器也必须相同
	启动类加载器(Bootstrap ClassLoader)	
		负责加载<JAVA_HOME>/lib目录或-Xbootclasspath指定的并且被虚拟机按照文件名识别的(rt.jar)；无法被获取
	扩展类加载器(Extension ClassLoader)	
		加载<JAVA_HOME>/lib/ext或java.ext.dirs系统变量中指定的路径中的类库；可以被开发者使用
	应用程序类加载器(App ClassLoader)	
		加载ClassPath下的类库；可以被获取

	父类委派模型(Parent Delegation Model)		所有的类加载器都有父加载器(除Bootstrap)(不用继承，使用组合)
		当一个类加载器收到加载类的请求，首先调用super.loadClass(name)，若被父加载器拒绝，再自己实现加载
		这样可以保证基础类(如java.lang.Object)无论在什么加载器环境中被加载都是同一个类